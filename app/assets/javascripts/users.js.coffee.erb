#encoding: utf-8

$(document).ready ->
  #init()
  exports = this
  exports.bookmarks_ids = new Array

  # bookmarks change method
  bookmark_change = (data) ->
    $.post "/tags/#{data.toString()}.json", { bookmark_id: exports.bookmark_id , _method: 'PUT'}, (data) ->
      element = $(".has_tags[data-id='#{exports.bookmark_id}']")
      html = ""
      for tag in data.taglist
        html+="
          <li>
            <a href='/tags/#{tag}' class='tag-background'>#{tag}</a>
          </li>
        "
      element.html html
    ,"json"
   
  # when bookmark-item click get website description of current bookmark
  description = (url) ->
    $.getJSON '/bookmarks/description.json', { url: url }, (data) ->
      $(".description").html data.description

 
  $(".bookmark-item").draggable()
  #Bookmark item click event
  $(document).on "click", ".bookmark-item", ->
    $(".bookmark-item").not(this).removeClass "selected"
    $(this).addClass "selected"
    exports.bookmark_id = $(this).find("input[type='hidden']").attr("name")
    $.get "/bookmarks/note.json", { t_id: exports.bookmark_id}, (data)->
      $(".bookmark_note").val data.note
    , "json"
    description($(this).find("small").html())

  # 打开添加标签筐 并绑定 tag-it 事件
  $(document).on "click", ".tag-button", ->
    $(this).parent().children(".add-tags").show()
    $(".has_tags[data-id='#{exports.bookmark_id}']").hide()
    $(".add-tags").tagit
      availableTags: ['ruby','rails'],
      afterTagRemoved: (event, ui) ->
        tags = $(this).tagit("assignedTags")
        bookmark_change(tags)
      , afterTagAdded: (event, ui) ->
        tags = $(this).tagit("assignedTags")
        bookmark_change(tags)

  # 标记 加星 事件
  change_star = (url) ->
    $.post "#{url}.json", { '_method': 'PUT'},(data)->
      log = data.star
    ,'json'
   # return false

  $(document).on "click",".bookmark-star", ->
  #$(".bookmark-star").on "click", ->
    flag = $(this).css "icon-white"
    #alert flag
    if flag#clicks
      $(this).children().toggleClass("icon-white")
      change_star(this.href)
      #alert "one"
    else
      $(this).children().toggleClass("icon-white")
      change_star(this.href)
      #alert "two"

  # 当 add-tags 失去焦点时隐藏它
  $(document).on "blur", ".add-tags input", ->
    tag_list = $(this).parents(".add-tags")
    tag_list.hide()
    $(".has_tags[data-id='#{exports.bookmark_id}']").show()

  # 设置 添加 书签 对话框 不隐藏背景
  $("#add-mark").modal
    backdrop: false,
    show: false
  $("#myModal").modal
    backdrop: false
    show: false

  # show inbox oookmarks
  $(".inbox").on 'click', ->
    $.getScript("#{this.href}.js")
    false
  # show favorite bookmarks
  $(".favorite").on 'click', ->
    $.getScript("#{this.href}.js")
    false

  # show bookmarks of current category
  $(".categories-list").on 'click', ->
    $.getScript(this.href+'.js')
    false

  # bookmark note change event
  $(".bookmark_note").blur ->
    $.post "bookmarks/#{exports.bookmark_id}", { bookmark: { note: $(this).val()}, '_method': 'PUT'}, (data)->
      alert data.message

  # show controls bar when checkbox checked
  $subbox = $(".bookmark-item input[type='checkbox']")
  $(".bookmark-item input[type='checkbox']").click ->
    $("#select-all").attr("checked",
      $subbox.length == $(".bookmark-item input[type='checkbox']:checked").length ? true : false )
  $("#select-all").click ->
    $("input[type='checkbox']").not(this).attr("checked",this.checked)



  # show bookmarks of current tag
  $(document).on "click", ".tag-link", ->
    $.getScript(this.href+'.js')
    false

  $(".pagination a").attr('data-remote','true')

  # pagination click event
  $(document).on "click", ".pagination a",->
    $.getScript(this.href)
    false

  # show more tags
  $('.more-tags').on 'ajax:success', (e, data, textStatus,jqXHR) ->
    list = $(".bookmark-list")
    #list.empty()
    html = ""
    for tag in data
      html += "
        <li>
          <a href='/tags/#{tag.name}' class='tag-link'  >#{tag.name}</a>
        </li>
      "
    list.html html

  # show category remove link when mouse over categories list
  $(".categories-list").mouseover ->
    $(this).css("width", "150")
    $(this).css("display", "inline-block")
    $(this).parent().find(".category-remove").show()
    
  # remove deleted categories item and remove link when category deleted 
  $(".category-remove").click ->
    $(this).parent().find(".categories-list").remove()
    $(this).remove()
  
  # hide category remove link and restore categories item style  When mouseleave categories list 
  $(".categories-list").parents("li").mouseleave ->
    $(this).find(".categories-list").css("width","195")
    $(this).css("display","block")
    $(this).parent().find(".category-remove").hide()

  # set control bar draggable 
  $(".control_bar").draggable()

  $("#add-mark input[type='text']").keydown (e) ->
    if keyCode == 13
      $("#add-mark").submit()


  container = document.querySelector('#fluid-container')

  mas = new Masonry(container, {
    columnWidth: 10,
    itemSelector: '.movie-item'
  })

  $('.dropdown-toggle').dropdown()
